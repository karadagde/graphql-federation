schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
    query: Query
    mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
    RATINGS @join__graph(name: "ratings", url: "http://host.docker.internal:9003/graphql")
    TITLES @join__graph(name: "titles", url: "http://host.docker.internal:9002/graphql")
    USERS @join__graph(name: "users", url: "http://host.docker.internal:9001/graphql")
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Mutation
@join__type(graph: USERS)
{
    createUser(user: UserInput!): User!
}

type Query
@join__type(graph: RATINGS)
@join__type(graph: TITLES)
@join__type(graph: USERS)
{
    title(id: ID!): Title @join__field(graph: TITLES)
    titles: [Title!]! @join__field(graph: TITLES)
    user(id: ID!): User @join__field(graph: USERS)
    users: [User!]! @join__field(graph: USERS)
}

type Rating
@join__type(graph: RATINGS, key: "id")
{
    id: ID!
    rate: Float!
    user: User
    title: Title
}

type Title
@join__type(graph: RATINGS, key: "id", extension: true)
@join__type(graph: TITLES, key: "id")
{
    id: ID!
    rating: [Rating] @join__field(graph: RATINGS)
    name: String! @join__field(graph: TITLES)
    year: Int! @join__field(graph: TITLES)
}

type User
@join__type(graph: RATINGS, key: "id", extension: true)
@join__type(graph: USERS, key: "id")
{
    id: ID!
    reviews: [Rating] @join__field(graph: RATINGS)
    email: String! @join__field(graph: USERS)
    name: String! @join__field(graph: USERS)
}

input UserInput
@join__type(graph: USERS)
{
    email: String!
    name: String!
}