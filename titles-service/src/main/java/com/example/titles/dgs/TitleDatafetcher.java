package com.example.titles.dgs;

import com.example.contracts.codegen.types.Title;
import com.example.titles.persistence.TitleEntity;
import com.example.titles.persistence.TitleRepository;
import com.netflix.graphql.dgs.DgsComponent;
import com.netflix.graphql.dgs.DgsQuery;
import com.netflix.graphql.dgs.InputArgument;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;

@DgsComponent
public class TitleDatafetcher {

    @Autowired
    private TitleRepository repo;

    @DgsQuery
    public Title title(@InputArgument("id") Long id) {
        return repo.findById(id).map(this::toGraphQL).orElse(null);
    }

    @DgsQuery
    public List<Title> titles() {
        return repo.findAll().stream().map(this::toGraphQL).toList();
    }

    // GraphQL DTO is generated by codegen (com.example.users.generated.types.Title)
    private Title toGraphQL(TitleEntity e) {
        return Title.newBuilder()
                .id(String.valueOf(e.getId()))
                .year(e.getYear())
                .name(e.getName())
                .build();
    }
}
