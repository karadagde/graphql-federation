package com.example.users.dgs;

import com.example.contracts.codegen.types.User;
import com.example.contracts.codegen.types.UserInput;
import com.example.users.persistence.UserEntity;
import com.example.users.persistence.UserRepository;
import com.netflix.graphql.dgs.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.List;
import java.util.Map;

@DgsComponent
public class UserDatafetcher {

    @Autowired
    private UserRepository repo;

    @DgsEntityFetcher(name = "User")
    public User user(Map<String, Object> values) {
        String id = (String) values.get("id");
        return repo.findById(Long.valueOf(id))
                .map(entity -> User.newBuilder()
                        .id(entity.getId().toString())
                        .name(entity.getName())    // must not be null
                        .email(entity.getEmail())  // must not be null
                        .build()
                )
                .orElse(null);
    }

    @DgsQuery
    public User user(@InputArgument String id) {
        return repo.findById(Long.valueOf(id)).map(this::toGraphQL).orElse(null);
    }

    @DgsMutation
    public User createUser(@InputArgument UserInput user){

        UserEntity entity = new UserEntity();
        entity.setName(user.getName());
        entity.setEmail(user.getEmail());

        UserEntity saved = repo.save(entity);

        return User.newBuilder()
                .id(String.valueOf(saved.getId()))
                .email(saved.getEmail())
                .name(saved.getName())
                .build();
    }

    @DgsQuery
    public List<User> users() {
        return repo.findAll().stream().map(this::toGraphQL).toList();
    }

    // GraphQL DTO is generated by codegen (com.example.users.generated.types.User)
    private User toGraphQL(UserEntity e) {

        return User.newBuilder()
                .id(String.valueOf(e.getId()))
                .email(e.getEmail())
                .name(e.getName())
                .build();
    }
}
